{
  "_args": [
    [
      {
        "raw": "csstype@^2.2.0",
        "scope": null,
        "escapedName": "csstype",
        "name": "csstype",
        "rawSpec": "^2.2.0",
        "spec": ">=2.2.0 <3.0.0",
        "type": "range"
      },
      "/home/alessandro/Documenti/projects/react/close2me/node_modules/@types/react"
    ]
  ],
  "_from": "csstype@^2.2.0",
  "_hasShrinkwrap": false,
  "_id": "csstype@2.6.6",
  "_location": "/csstype",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/csstype_2.6.6_1562579242684_0.19430006458351"
  },
  "_npmUser": {
    "name": "faddee",
    "email": "fredrik.nicol@gmail.com"
  },
  "_npmVersion": "5.10.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "csstype@^2.2.0",
    "scope": null,
    "escapedName": "csstype",
    "name": "csstype",
    "rawSpec": "^2.2.0",
    "spec": ">=2.2.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@types/react"
  ],
  "_resolved": "https://registry.npmjs.org/csstype/-/csstype-2.6.6.tgz",
  "_shasum": "c34f8226a94bbb10c32cc0d714afdf942291fc41",
  "_shrinkwrap": null,
  "_spec": "csstype@^2.2.0",
  "_where": "/home/alessandro/Documenti/projects/react/close2me/node_modules/@types/react",
  "author": {
    "name": "Fredrik Nicol",
    "email": "fredrik.nicol@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/frenic/csstype/issues"
  },
  "dependencies": {},
  "description": "Strict TypeScript and Flow types for style based on MDN data",
  "devDependencies": {
    "@types/chokidar": "^2.1.3",
    "@types/jest": "^24.0.13",
    "@types/jsdom": "^12.2.3",
    "@types/node": "^12.0.7",
    "@types/prettier": "^1.16.4",
    "chalk": "^2.4.2",
    "chokidar": "^3.0.1",
    "fast-glob": "^2.2.7",
    "flow-bin": "^0.100.0",
    "jest": "^24.8.0",
    "jsdom": "^15.1.1",
    "mdn-browser-compat-data": "git+https://github.com/mdn/browser-compat-data.git#0d355f21a6d1a22057a9f318b33ccd7eb7ba6576",
    "mdn-data": "git+https://github.com/mdn/data.git#fcd2fd333aca00c08ab3f876adce10e875b95d7c",
    "prettier": "^1.18.2",
    "sync-request": "^6.1.0",
    "ts-node": "^8.2.0",
    "tslint": "^5.17.0",
    "tslint-config-prettier": "^1.18.0",
    "turndown": "^5.0.3",
    "typescript": "~3.5.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-RpFbQGUE74iyPgvr46U9t1xoQBM8T4BL8SxrN66Le2xYAPSaDJJKeztV3awugusb3g3G9iL8StmkBBXhcbbXhg==",
    "shasum": "c34f8226a94bbb10c32cc0d714afdf942291fc41",
    "tarball": "https://registry.npmjs.org/csstype/-/csstype-2.6.6.tgz",
    "fileCount": 5,
    "unpackedSize": 1650450,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdIxErCRA9TVsSAnZWagAA1fgP/it4Y4cNbe/jNKYO6DW0\nWpaN3OQtyNway+rohwqx4LyxIxshXw28I42xqL/OZ/pPNuB9U3T7tdLkDvpy\nxVam9SOfJJIsKzQn13/MORbTtTseNqWJrjXNHxihZI3p+ivrLDxFoIp6NtzZ\nGYsfnhrHw0MO5bJxAcHO1Cuv8uWKRkckMzvttcx5yWuElMWuqxoBtmBgq4RB\nxu9clDDB5VloU0tq2w6HkbGsIduW8ACYrouyyF2kOyYZ5InqqeHc/pQ31p5x\nYG7vNHMyYLCbGjanW6T5DawTgi9vK06UU2JcwS2zbvU6N9x+pZWbh6nD0hEL\n0bOqWc8NpM9Aw+nlLx5Ki9y8h8SWmHfPellKyvBg2qetKhfbCCuD8JuvfeSU\nj1c44aAtwH50g33KjZobEFyiZ8yJ27SiRN9rewD8R1j8iJVkx6EM5OR7KiQ8\nJUWCXX42lY7Qar90ammt+AWfZMJTACSX8EyuyH6JgFNfga5LBu3ZjbJyPNtA\nggel2ho9tZIbvaN4xm24EM95WxdcDSmIPSULIXROEr/mDlOyS4sbjsVuV6Xn\n1ossQwUVaSYjQoHOu8zePZHBIHVyBFL9P/67to7Jm4qrNYAJJRyA65Uv4L2l\ns4OA8Dc+FnuStLcAFDZqF5xlDfEvO4AqcBmd4yxuthnkyu7Yg5QxFCfr1yRP\nMiXO\r\n=fYqj\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.d.ts",
    "index.js.flow"
  ],
  "gitHead": "5874b0637f9ba68eb3db8ffd5a55ecba84e0290b",
  "homepage": "https://github.com/frenic/csstype#readme",
  "keywords": [
    "css",
    "style",
    "typescript",
    "flow",
    "typings",
    "types",
    "definitions"
  ],
  "license": "MIT",
  "main": "",
  "maintainers": [
    {
      "name": "faddee",
      "email": "fredrik.nicol@gmail.com"
    }
  ],
  "name": "csstype",
  "optionalDependencies": {},
  "readme": "# CSSType\n\n[![npm](https://img.shields.io/npm/v/csstype.svg)](https://www.npmjs.com/package/csstype)\n\nTypeScript and Flow definitions for CSS, generated by [data from MDN](https://github.com/mdn/data). It provides autocompletion and type checking for CSS properties and values.\n\n```ts\nimport * as CSS from 'csstype';\n\nconst style: CSS.Properties = {\n  colour: 'white', // Type error on property\n  textAlign: 'middle', // Type error on value\n};\n```\n\n## Getting started\n\n```sh\n$ npm install csstype\n$ # or\n$ yarn add csstype\n```\n\n## Table of content\n\n- [Style types](#style-types)\n- [At-rule types](#at-rule-types)\n- [Pseudo types](#pseudo-types)\n- [Usage](#usage)\n- [What should I do when I get type errors?](#what-should-i-do-when-i-get-type-errors)\n- [Version 2.0](#version-20)\n- [Contributing](#contributing)\n  - [Commands](#commands)\n\n## Style types\n\nProperties are categorized in different uses and in several technical variations to provide typings that suits as many as possible.\n\nAll interfaces has one optional generic argument to define length. It defaults to `string | 0` because `0` is the [only unitless length](https://www.w3.org/TR/REC-CSS2/syndata.html#length-units). You can specify this, e.g. `string | number`, for platforms and libraries that accepts any numeric value as length with a specific unit.\n\n|                | Default              | `Hyphen`                   | `Fallback`                   | `HyphenFallback`                   |\n| -------------- | -------------------- | -------------------------- | ---------------------------- | ---------------------------------- |\n| **All**        | `Properties`         | `PropertiesHyphen`         | `PropertiesFallback`         | `PropertiesHyphenFallback`         |\n| **`Standard`** | `StandardProperties` | `StandardPropertiesHyphen` | `StandardPropertiesFallback` | `StandardPropertiesHyphenFallback` |\n| **`Vendor`**   | `VendorProperties`   | `VendorPropertiesHyphen`   | `VendorPropertiesFallback`   | `VendorPropertiesHyphenFallback`   |\n| **`Obsolete`** | `ObsoleteProperties` | `ObsoletePropertiesHyphen` | `ObsoletePropertiesFallback` | `ObsoletePropertiesHyphenFallback` |\n| **`Svg`**      | `SvgProperties`      | `SvgPropertiesHyphen`      | `SvgPropertiesFallback`      | `SvgPropertiesHyphenFallback`      |\n\nCategories:\n\n- **All** - Includes `Standard`, `Vendor`, `Obsolete` and `Svg`\n- **`Standard`** - Current properties and extends subcategories `StandardLonghand` and `StandardShorthand` _(e.g. `StandardShorthandProperties`)_\n- **`Vendor`** - Vendor prefixed properties and extends subcategories `VendorLonghand` and `VendorShorthand` _(e.g. `VendorShorthandProperties`)_\n- **`Obsolete`** - Removed or deprecated properties\n- **`Svg`** - SVG-specific properties\n\nVariations:\n\n- **Default** - JavaScript (camel) cased property names\n- **`Hyphen`** - CSS (kebab) cased property names\n- **`Fallback`** - Also accepts array of values e.g. `string | string[]`\n\n## At-rule types\n\nAt-rule interfaces with descriptors.\n\n|                      | Default        | `Hyphen`             | `Fallback`             | `HyphenFallback`             |\n| -------------------- | -------------- | -------------------- | ---------------------- | ---------------------------- |\n| **`@counter-style`** | `CounterStyle` | `CounterStyleHyphen` | `CounterStyleFallback` | `CounterStyleHyphenFallback` |\n| **`@font-face`**     | `FontFace`     | `FontFaceHyphen`     | `FontFaceFallback`     | `FontFaceHyphenFallback`     |\n| **`@page`**          | `Page`         | `PageHyphen`         | `PageFallback`         | `PageHyphenFallback`         |\n| **`@viewport`**      | `Viewport`     | `ViewportHyphen`     | `ViewportFallback`     | `ViewportHyphenFallback`     |\n\n## Pseudo types\n\nString literals of pseudo classes and pseudo elements\n\n- `Pseudos`\n\n  Extends:\n\n  - `AdvancedPseudos`\n\n    Function-like pseudos e.g. `:not(:first-child)`. The string literal contains the value excluding the parenthesis: `:not`. These are separated because they require an argument that results in infinite number of variations.\n\n  - `SimplePseudos`\n\n    Plain pseudos e.g. `:hover` that can only be **one** variation.\n\n## Usage\n\nLength defaults to `string | 0`. But it's possible to override it using generics.\n\n```ts\nimport * as CSS from 'csstype';\n\nconst style: CSS.Properties<string | number> = {\n  padding: 10,\n  margin: '1rem',\n};\n```\n\nIn some cases, like for CSS-in-JS libraries, an array of values is a way to provide fallback values in CSS. Using `CSS.PropertiesFallback` instead of `CSS.Properties` will add the possibility to use any property value as an array of values.\n\n```ts\nimport * as CSS from 'csstype';\n\nconst style: CSS.PropertiesFallback = {\n  display: ['-webkit-flex', 'flex'],\n  color: 'white',\n};\n```\n\nThere's even string literals for pseudo selectors and elements.\n\n```ts\nimport * as CSS from 'csstype';\n\nconst pseudos: { [P in CSS.SimplePseudos]?: CSS.Properties } = {\n  ':hover': {\n    display: 'flex',\n  },\n};\n```\n\nHyphen cased (kebab cased) properties are provided in `CSS.PropertiesHyphen` and `CSS.PropertiesHyphenFallback`. It's not **not** added by default in `CSS.Properties`. To allow both of them, you can simply extend with `CSS.PropertiesHyphen` or/and `CSS.PropertiesHyphenFallback`.\n\n```ts\nimport * as CSS from 'csstype';\n\ninterface Style extends CSS.Properties, CSS.PropertiesHyphen {}\n\nconst style: Style = {\n  'flex-grow': 1,\n  'flex-shrink': 0,\n  'font-weight': 'normal',\n  backgroundColor: 'white',\n};\n```\n\n## What should I do when I get type errors?\n\nThe goal is to have as perfect types as possible and we're trying to do our best. But with CSS Custom Properties, the CSS specification changing frequently and vendors implementing their own specifications with new releases sometimes causes type errors even if it should work. Here's some steps you could take to get it fixed:\n\n_If you're using CSS Custom Properties you can step directly to step 3._\n\n1.  **First of all, make sure you're doing it right.** A type error could also indicate that you're not :wink:\n\n    - Some CSS specs that some vendors has implemented could have been officially rejected or haven't yet received any official acceptance and are therefor not included\n    - If you're using TypeScript, [type widening](https://blog.mariusschulz.com/2017/02/04/typescript-2-1-literal-type-widening) could be the reason you get `Type 'string' is not assignable to...` errors\n\n2.  **Have a look in [issues](https://github.com/frenic/csstype/issues) to see if an issue already has been filed. If not, create a new one.** To help us out, please refer to any information you have found.\n3.  Fix the issue locally with **TypeScript** (Flow further down):\n\n    - The recommended way is to use **module augmentation**. Here's a few examples:\n\n      ```ts\n      // My css.d.ts file\n      import * as CSS from 'csstype';\n\n      declare module 'csstype' {\n        interface Properties {\n          // Add a missing property\n          WebkitRocketLauncher?: string;\n\n          // Add a CSS Custom Property\n          '--theme-color'?: 'black' | 'white';\n\n          // ...or allow any other property\n          [index: string]: any;\n        }\n      }\n      ```\n\n    - The alternative way is to use **type assertion**. Here's a few examples:\n\n      ```ts\n      const style: CSS.Properties = {\n        // Add a missing property\n        ['WebkitRocketLauncher' as any]: 'launching',\n\n        // Add a CSS Custom Property\n        ['--theme-color' as any]: 'black',\n      };\n      ```\n\n    Fix the issue locally with **Flow**:\n\n    - Use **type assertion**. Here's a few examples:\n\n      ```js\n      const style: $Exact<CSS.Properties<*>> = {\n        // Add a missing property\n        [('WebkitRocketLauncher': any)]: 'launching',\n\n        // Add a CSS Custom Property\n        [('--theme-color': any)]: 'black',\n      };\n      ```\n\n## Version 2.0\n\nThe casing of CSS vendor properties are changed matching the casing of prefixes in Javascript. So all of them are capitalized except for `ms`.\n\n- `msOverflowStyle` is still `msOverflowStyle`\n- `mozAppearance` is now `MozAppearance`\n- `webkitOverflowScrolling` is now `WebkitOverflowScrolling`\n\nMore info: https://www.andismith.com/blogs/2012/02/modernizr-prefixed/\n\n## Contributing\n\n**Never modify `index.d.ts` and `index.js.flow` directly. They are generated automatically and committed so that we can easily follow any change it results in.** Therefor it's important that you run `$ git config merge.ours.driver true` after you've forked and cloned. That setting prevents merge conflicts when doing rebase.\n\n### Commands\n\n- `yarn build` Generates typings and type checks them\n- `yarn watch` Runs build on each save\n- `yarn test` Runs the tests\n- `yarn lazy` Type checks, lints and formats everything\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/frenic/csstype.git"
  },
  "scripts": {
    "build": "ts-node --files build.ts --start",
    "lazy": "tsc && npm run lint && npm run pretty",
    "lint": "tslint --exclude node_modules/**/* --exclude **/*.d.ts --fix **/*.ts",
    "prepublish": "tsc && npm run test && npm run build && npm run typecheck",
    "pretty": "prettier --write build.ts **/*.{ts,js,json,md}",
    "rebase-build": "git rebase --exec \"yarn --ignore-scripts && yarn build && git commit -a --amend --no-verify --no-edit --allow-empty\"",
    "test": "jest --no-cache",
    "typecheck": "tsc typecheck.ts --noEmit --pretty & flow check typecheck.js",
    "update": "ts-node --files update.ts",
    "watch": "ts-node --files build.ts --watch"
  },
  "types": "index.d.ts",
  "version": "2.6.6"
}
